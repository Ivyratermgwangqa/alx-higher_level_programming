======================
7-base_geometry.py
======================

Module defined as base_geometry class used second blueprint

=====================

>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> bg = BaseGeometry()

# Test integer_validator with valid values
>>> bg.integer_validator("string", 7)
>>> bg.integer_validator("name", 12)

# Test integer_validator with invalid values
>>> try:
...     bg.integer_validator("age", 0)
... except ValueError as e:
...     print(e)
age must be greater than 0

>>> try:
...     bg.integer_validator("name", "Edward")
... except TypeError as e:
...     print(e)
name must be an integer

>>> try:
...     bg.integer_validator("name", [1])
... except TypeError as e:
...     print(e)
name must be an integer

>>> try:
...     bg.integer_validator("name", {2,3})
... except TypeError as e:
...     print(e)
name must be an integer

>>> try:
...     bg.integer_validator("name", (7, ))
... except TypeError as e:
...     print(e)
name must be an integer

>>> try:
...     bg.integer_validator("name", None)
... except TypeError as e:
...     print(e)
name must be an integer

>>> try:
...     bg.integer_validator("num", "3")
... except TypeError as e:
...     print(e)
num must be an integer

>>> try:
...     bg.integer_validator("negative", -1)
... except ValueError as e:
...     print(e)
negative must be greater than 0

>>> try:
...     bg.integer_validator("float", 2.2)
... except TypeError as e:
...     print(e)
float must be an integer

>>> try:
...     bg.integer_validator("negative2", -1.2)
... except TypeError as e:
...     print(e)
negative2 must be an integer

>>> try:
...     bg.integer_validator("bool", True)
... except TypeError as e:
...     print(e)
bool must be an integer

>>> try:
...     bg.integer_validator("age")
... except TypeError as e:
...     print(e)
integer_validator() missing 1 required positional argument: 'value

# Test the area method
>>> try:
...     bg.area()
... except Exception as e:
...     print(e)
area() is not implemented
