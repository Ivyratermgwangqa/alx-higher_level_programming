======================
5-text_square
======================

Text Indentation Module Unit Tests

Test cases to verify the behavior of the text_indentation function.

It should print text with new lines after using '.?:'

::

    >>> text_indentation = __import__('5-text_indentation').text_indentation
    >>> text_indentation("elit.")
    elit.
    <BLANKLINE>

It should also work when there is a space at the beginning of a line.

::

    >>> text_indentation("    adipiscing elit.")
    adipiscing elit.
    <BLANKLINE>

It should work when there is no argument printed in the string.

::

    >>> text_indentation("    ")


It should work when there are spaces at the end of a line.

::

    >>> text_indentation("commovere?    ")
    commovere?
    <BLANKLINE>

It should work when there are spaces and a new line with the same pattern.

::

    >>> text_indentation("    illud quidem.    nihil dolere.   ")
    illud quidem.
    <BLANKLINE>
    nihil dolere.
    <BLANKLINE>

It should work when there is no '?', '.', ':' at the end of the line.

::

    >>> text_indentation("Lorem ipsum dolor sit amet, consectetur")
    Lorem ipsum dolor sit amet, consectetur

It should work when you print a newline \n.

::

    >>> text_indentation("finem illi videri nihil dolere.\n Transfer idem.")
    finem illi videri nihil dolere.
    <BLANKLINE>
    <BLANKLINE>
    Transfer idem.
    <BLANKLINE>

It should raise a TypeError if the input is not a string.

::

    >>> text_indentation(4)
    Traceback (most recent call last):
    TypeError: text must be a string

It should raise a TypeError if the input is not a string.

::

    >>> text_indentation({"Lorem": 1, "ipsum": 2})
    Traceback (most recent call last):
    TypeError: text must be a string

It should raise a TypeError if the input is None.

::

    >>> text_indentation(None)
    Traceback (most recent call last):
    TypeError: text must be a string

::
