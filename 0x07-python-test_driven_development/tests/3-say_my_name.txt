======================
3-say_my_name
======================

Say my name module is the unit test that verifies the print of the first and last name.

=====================

::

    >>> say_my_name = __import__('3-say_my_name').say_my_name
    >>> say_my_name("Jhon", "Smith")
    My name is Jhon Smith

This test checks if the function correctly prints both the first name "Jhon" and the last name "Smith."

::

    >>> say_my_name("Betty", "Holberton")
    My name is Betty Holberton

This test verifies that the function prints both the first name "Betty" and the last name "Holberton" correctly.

It also works with only one name; the next argument prints an empty string.

::

    >>> say_my_name("Edward")
    My name is Edward 

This test checks if the function prints the first name "Edward" and an empty string as the last name, as expected.

TypeError there is not a string in the first name

::

    >>> say_my_name(8, "Edward")
    Traceback (most recent call last):
    TypeError: first_name must be a string

This test checks if the function raises a `TypeError` when the first name is not a string, in this case, the integer 8.

TypeError there is not a string in the last name

::

    >>> say_my_name("Edward", 8)
    Traceback (most recent call last):
    TypeError: last_name must be a string

This test checks if the function raises a `TypeError` when the last name is not a string, in this case, the integer 8.

TypeError adding another list, tuple, or dict either the first or last name

::

    >>> say_my_name({"Edward: 3", "Ortiz: 0"}, 8)
    Traceback (most recent call last):
    TypeError: first_name must be a string

This test verifies that the function raises a `TypeError` when a non-string data structure (in this case, a set) is used as the first name.

::

    >>> say_my_name("Edward", {"Edward: 3", "Ortiz: 0"})
    Traceback (most recent call last):
    TypeError: last_name must be a string

This test checks if the function raises a `TypeError` when a non-string data structure (in this case, a set) is used as the last name.

::

    >>> say_my_name({"Edward: 3", "Ortiz: 0"}, "Ortiz")
    Traceback (most recent call last):
    TypeError: first_name must be a string

This test ensures that the function raises a `TypeError` when a non-string data structure (in this case, a set) is used as the first name.

TypeError if there is no input

::

    >>> say_my_name()
    Traceback (most recent call last):
    TypeError: say_my_name() missing 1 required positional argument: 'first_name'

This test checks if the function raises a `TypeError` when it's called with no arguments, as it requires at least one argument.

TypeError if the input is None

::

    >>> say_my_name(None)
    Traceback (most recent call last):
    TypeError: first_name must be a string

This test verifies that the function raises a `TypeError` when `None` is passed as an argument for `first_name`.

::
